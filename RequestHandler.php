<?php

namespace Piwik\Plugins\MatomoKafka;

use Exception;
use Piwik\Common;
use Piwik\Tracker;
use Piwik\Tracker\RequestSet;
use Piwik\Tracker\Handler;
use Piwik\Tracker\ScheduledTasksRunner;
use RdKafka\Conf;
use RdKafka\Producer;
use function DI\get;

class RequestHandler extends Handler
{

    private $topic;

    public function __construct()
    {
        parent::__construct();
        $conf = new Conf();
        $conf->set('log_level', (string)LOG_DEBUG);
        $conf->set('debug', 'all');
        $rk = new Producer($conf);
        $rk->addBrokers("localhost:9092");
        $this->topic = $rk->newTopic("matomo");
    }

    public function process(Tracker $tracker, RequestSet $requestSet)
    {
        if ($requestSet->hasRequests()) {
            foreach ($requestSet->getRequests() as &$request) {
                $json = json_encode($request->getParams());
                $this->topic->produce(RD_KAFKA_PARTITION_UA, 0, $json);
            }
        }
        parent::process($tracker, $requestSet); // TODO: Change the autogenerated stub
    }


    public function onStartTrackRequests(Tracker $tracker, RequestSet $requestSet)
    {
        parent::onStartTrackRequests($tracker, $requestSet); // TODO: Change the autogenerated stub
    }

    public function finish(Tracker $tracker, RequestSet $requestSet)
    {
        return parent::finish($tracker, $requestSet); // TODO: Change the autogenerated stub
    }

    public function getResponse(): Tracker\Response
    {
        return parent::getResponse(); // TODO: Change the autogenerated stub
    }

    public function init(Tracker $tracker, RequestSet $requestSet)
    {
        parent::init($tracker, $requestSet); // TODO: Change the autogenerated stub
    }

    public function onAllRequestsTracked(Tracker $tracker, RequestSet $requestSet)
    {
        parent::onAllRequestsTracked($tracker, $requestSet); // TODO: Change the autogenerated stub
    }

    public function onException(Tracker $tracker, RequestSet $requestSet, Exception $e)
    {
        parent::onException($tracker, $requestSet, $e); // TODO: Change the autogenerated stub
    }

    public function setResponse($response)
    {
        parent::setResponse($response); // TODO: Change the autogenerated stub
    }

    public function setScheduledTasksRunner(ScheduledTasksRunner $runner)
    {
        parent::setScheduledTasksRunner($runner); // TODO: Change the autogenerated stub
    }

    /**
     * @return mixed
     */
    public function getRk()
    {
        return $this->rk;
    }

    /**
     * @param mixed $rk
     */
    public function setRk($rk): void
    {
        $this->rk = $rk;
    }


}

